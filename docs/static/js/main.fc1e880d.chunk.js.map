{"version":3,"sources":["assets/brush.svg","assets/highlighter.svg","assets/eraser.svg","assets/font.svg","default/index.ts","components/Popup.tsx","components/ColorPicker.tsx","components/Slider.tsx","Setting/atom.tsx","Setting/useColorHook.tsx","Setting/Brush.tsx","Setting/Highlighter.tsx","Setting/Eraser.tsx","Setting/Text.tsx","Setting/index.tsx","components/TextArea.tsx","WhiteBoard/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","boardSettings","width","color","smooth","highlight","eraser","text","fontSize","colors","Wrapper","styled","div","React","trigger","children","offset","allowed","undefined","style","setStyle","show","setShow","triggerRef","popupRef","current","getBoundingClientRect","popup","top","y","left","x","type","props","ref","onClick","event","prevState","ReactDOM","document","body","Input","input","attrs","Color","Icon","disabled","RemoveIcon","button","ColorWrapper","selected","ColorPicker","value","onChange","addColor","removeColor","updateColor","inputRef","handleColorChange","target","getAttribute","handleRemoveClick","parseInt","map","index","key","data-index","background","data-color","length","click","Slider","min","max","img","ItemWrapper","flex","Badge","span","Label","label","useColor","custom","defaultColors","setColors","prevColors","j","filter","__","i","newColor","Brush","setColor","setWidth","picker","firstRun","src","brush","highlighter","FontSizeWrapper","FontSize","Font","p","size","Text","setFontSize","handleFontSizeClick","font","data-size","Setting","setSettings","setSelected","updateSetting","settings","params","Highlighter","TextArea","textarea","Canvas","canvas","Button","WhiteBoard","dirtyProps","drawing","setDrawing","textareaStyle","setTextAreaStyle","points","imageData","canvasRef","highlightRef","textAreaRef","dimension","setDimension","focus","window","onresize","ctx","getContext","getImageData","offsetWidth","offsetHeight","height","putImageData","drawOnCanvas","plots","lineWidth","lineCap","strokeStyle","globalCompositeOperation","beginPath","moveTo","lineTo","stroke","handleMouseMove","reactEvent","nativeEvent","offsetX","offsetY","push","handleMouseDown","Math","sqrt","handleMouseUp","console","log","onMouseMove","onMouseDown","onMouseUp","onMouseLeave","opacity","rows","cols","onBlur","fillStyle","fillText","clearRect","App","className","Boolean","location","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc1e880d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brush.27b127d3.svg\";","module.exports = __webpack_public_path__ + \"static/media/highlighter.66601412.svg\";","module.exports = __webpack_public_path__ + \"static/media/eraser.da647259.svg\";","module.exports = __webpack_public_path__ + \"static/media/font.8d3a7b02.svg\";","import { IBoardSetting } from \"../interfaces\";\n\nexport const boardSettings: IBoardSetting = {\n  width: 2,\n  color: \"black\",\n  smooth: \"round\" as IBoardSetting[\"smooth\"],\n  highlight: false,\n  eraser: false,\n  text: false,\n  fontSize: 14,\n};\n\nexport const colors = [\n  \"#000000\",\n  \"#F7412D\",\n  \"#47B04B\",\n  \"#FFC100\",\n  \"#9D1BB2\",\n  \"#EC1661\",\n];\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport styled from \"styled-components\";\n\ninterface IProps {\n  trigger: React.ReactElement;\n  children: React.ReactChild;\n  offset?: { x?: number; y?: number };\n  allowed?: boolean;\n}\n\nconst Wrapper = styled.div`\n  position: fixed;\n`;\n\nconst Popup = ({ trigger, children, offset, allowed }: IProps) => {\n  const [style, setStyle] = React.useState<React.CSSProperties | undefined>(\n    undefined\n  );\n  const [show, setShow] = React.useState(false);\n  const triggerRef = React.useRef<HTMLSpanElement>(null);\n  const popupRef = React.useRef<HTMLDivElement>(null);\n\n  // to avoid any possible flickering\n  React.useEffect(() => {\n    if (!show) {\n      return;\n    }\n\n    if (triggerRef.current && popupRef.current) {\n      const trigger = triggerRef.current.getBoundingClientRect();\n      const popup = popupRef.current.getBoundingClientRect();\n\n      setStyle({\n        top: trigger.y + (offset ? offset.y || 0 : 0),\n        left: trigger.x - popup.width + (offset ? offset.x || 0 : 0),\n      });\n    }\n  }, [show, offset]);\n\n  React.useEffect(() => {\n    if (typeof allowed === \"boolean\" && !allowed) {\n      setShow(false);\n    }\n  }, [allowed]);\n\n  return (\n    <>\n      <trigger.type\n        {...trigger.props}\n        ref={triggerRef}\n        onClick={(event: React.MouseEvent) => {\n          if (trigger.props.onClick) {\n            trigger.props.onClick(event);\n          }\n          setShow((prevState) => !prevState);\n        }}\n      ></trigger.type>\n      {show &&\n        (typeof allowed === \"boolean\" ? allowed : true) &&\n        ReactDOM.createPortal(\n          <Wrapper ref={popupRef} style={style}>\n            {children}\n          </Wrapper>,\n          document.body\n        )}\n    </>\n  );\n};\n\nexport default React.memo(Popup);\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\ninterface IProps {\n  onChange: (color: string) => void;\n  addColor: (color: string) => void;\n  updateColor: (i: number, color: string) => void;\n  removeColor: (i: number) => void;\n  value: string;\n  colors: string[];\n}\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Input = styled.input.attrs({ type: \"color\" })`\n  -webkit-appearance: none;\n  border: none;\n  width: 0;\n  height: 0;\n  position: absolute;\n  opacity: 0;\n`;\n\nconst Color = styled.div`\n  width: 24px;\n  height: 24px;\n  border-radius: 100%;\n`;\n\nconst Icon = styled.div<{ disabled: boolean }>`\n  border: 1px solid #efefef;\n  font-size: 24px;\n  align-items: flex-end;\n  border-radius: 100px;\n  width: 24px;\n  height: 24px;\n  margin: 4px;\n  display: flex;\n  justify-content: center;\n  ${({ disabled }) =>\n    disabled\n      ? `\n    pointer-events: none;\n    opacity: 0.3;\n    cursor: not-allowed;\n  `\n      : \"\"}\n`;\n\nconst RemoveIcon = styled.button`\n  position: absolute;\n\n  top: -6px;\n  right: -4px;\n  background: white;\n  border-radius: 100%;\n  height: 14px;\n  width: 14px;\n  font-size: 8px;\n  text-align: center;\n  vertical-align: middle;\n  border: 1px solid #efefef;\n  padding: 0;\n  display: none;\n  cursor: pointer;\n  &:focus {\n    outline: none;\n  }\n  &:hover {\n    background: #efefef;\n  }\n`;\n\nconst ColorWrapper = styled.div<{ selected: boolean }>`\n  margin: 4px;\n  position: relative;\n  ${({ selected }) =>\n    selected\n      ? `background: #ddd; \n        padding: 4px;\n        margin: 0px;\n        border-radius: 4px;`\n      : \"\"}\n  &:hover {\n    ${RemoveIcon} {\n      display: block;\n    }\n  }\n`;\n\nconst ColorPicker = ({\n  value,\n  onChange,\n  colors,\n  addColor,\n  removeColor,\n  updateColor,\n}: IProps) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const handleColorClick = () => {\n    if (inputRef.current) {\n      inputRef.current.click();\n      addColor(\"#000000\");\n    }\n  };\n\n  const handleColorChange = (event: React.MouseEvent) => {\n    onChange((event.target as HTMLDivElement).getAttribute(\"data-color\")!);\n  };\n\n  const handleColorUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    updateColor(colors.length - 1, event.target.value);\n  };\n\n  const handleRemoveClick = (event: React.MouseEvent) => {\n    removeColor(\n      parseInt((event.target as HTMLDivElement).getAttribute(\"data-index\")!)\n    );\n  };\n\n  return (\n    <Wrapper>\n      {colors.map((color, index) => (\n        <ColorWrapper key={index} selected={color === value}>\n          <RemoveIcon data-index={index} onClick={handleRemoveClick}>\n            <span data-index={index}>X</span>\n          </RemoveIcon>\n          <Color\n            style={{ background: color }}\n            data-color={color}\n            onClick={handleColorChange}\n          />\n        </ColorWrapper>\n      ))}\n\n      <Icon disabled={colors.length === 12} onClick={handleColorClick}>\n        &#43;\n      </Icon>\n      <Input ref={inputRef} value={value} onChange={handleColorUpdate} />\n    </Wrapper>\n  );\n};\n\nexport default ColorPicker;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\ninterface IProps {\n  min: number;\n  max: number;\n  value: number;\n  onChange: (value: number) => void;\n}\n\nconst Input = styled.input.attrs({ type: \"range\" })`\n  width: 120px;\n  margin: 0 8px;\n\n  &::-webkit-slider-thumb {\n    cursor: pointer;\n  }\n`;\n\nconst Slider = ({ min, max, value, onChange }: IProps) => {\n  return (\n    <Input\n      min={min}\n      max={max}\n      value={value}\n      onChange={(event) => {\n        onChange(parseInt(event.target.value));\n      }}\n    />\n  );\n};\n\nexport default Slider;\n","import styled from \"styled-components\";\n\nexport const Icon = styled.img`\n  width: 24px;\n  height: 24px;\n`;\n\nexport const ItemWrapper = styled.div<{ selected?: boolean; flex?: boolean }>`\n  ${({ flex }) =>\n    flex\n      ? `\n    display: flex;\n    align-items:center;\n  `\n      : \"\"}\n  &:not(:last-child) {\n    padding-bottom: 12px;\n    margin-bottom: 12px;\n    border-bottom: 1px solid #efefef;\n  }\n  cursor: pointer;\n  padding: 0 12px;\n\n  ${({ selected }) =>\n    selected &&\n    `img{filter: invert(0.5)\n    sepia(1)\n    hue-rotate(200deg)\n    saturate(20)\n    brightness(1)}`}\n`;\n\nexport const Badge = styled.span`\n  padding: 4px 4px;\n  background: #efefef;\n  border-radius: 4px;\n  font-size: 14px;\n`;\n\nexport const Label = styled.label`\n  font-size: 14px;\n  font-weight: 600;\n`;\n","import * as React from \"react\";\n\nimport { colors as defaultColors } from \"../default\";\n\nconst useColor = (\n  custom?: string[]\n): {\n  colors: string[];\n  addColor: (color: string) => void;\n  removeColor: (i: number) => void;\n  updateColor: (i: number, color: string) => void;\n} => {\n  const [colors, setColors] = React.useState(custom || defaultColors);\n\n  const addColor = (color: string) => {\n    setColors((prevColors) => {\n      if (prevColors.length < 12) {\n        return [...prevColors, color];\n      } else {\n        return prevColors;\n      }\n    });\n  };\n\n  const removeColor = (j: number) => {\n    setColors((prevColors) => prevColors.filter((__, i) => i !== j));\n  };\n\n  const updateColor = (j: number, newColor: string) => {\n    setColors((prevColors) =>\n      prevColors.map((color, i) => (i !== j ? color : newColor))\n    );\n  };\n\n  return { colors, addColor, removeColor, updateColor };\n};\n\nexport default useColor;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport brush from \"../assets/brush.svg\";\nimport Popup from \"../components/Popup\";\nimport ColorPicker from \"../components/ColorPicker\";\nimport Slider from \"../components/Slider\";\nimport { ItemWrapper, Icon, Badge, Label } from \"./atom\";\nimport { IBoardSetting } from \"../interfaces\";\nimport useColor from \"./useColorHook\";\n\ninterface IProps {\n  selected: boolean;\n  onChange: (params: Pick<IBoardSetting, \"color\" | \"width\">) => void;\n  onClick: () => void;\n}\n\nconst Wrapper = styled.div`\n  background: white;\n  padding: 16px 0;\n  border-radius: 4px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n`;\n\nconst Brush = ({ selected, onChange, onClick }: IProps) => {\n  const [color, setColor] = React.useState(\"#000000\");\n  const [width, setWidth] = React.useState(1);\n  const picker = useColor();\n  const firstRun = React.useRef(true);\n\n  React.useEffect(() => {\n    if (firstRun.current) {\n      firstRun.current = false;\n      return;\n    }\n    onChange({ width, color });\n  }, [width, color]);\n\n  return (\n    <Popup\n      allowed={selected}\n      offset={{ x: -8, y: -16 }}\n      trigger={\n        <ItemWrapper\n          onClick={() => {\n            onClick();\n            onChange({ width, color });\n          }}\n          selected={selected}\n        >\n          <Icon src={brush} />\n        </ItemWrapper>\n      }\n    >\n      <Wrapper style={{ width: \"208px\" }}>\n        <ItemWrapper>\n          <ColorPicker\n            {...picker}\n            value={color}\n            onChange={(color) => setColor(color)}\n          />\n        </ItemWrapper>\n        <ItemWrapper flex>\n          <Label>Size</Label>\n          <Slider\n            value={width}\n            min={1}\n            max={25}\n            onChange={(width) => setWidth(width)}\n          />\n          <Badge>{width}</Badge>\n        </ItemWrapper>\n      </Wrapper>\n    </Popup>\n  );\n};\n\nexport default Brush;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport { IBoardSetting } from \"../interfaces\";\nimport highlighter from \"../assets/highlighter.svg\";\nimport Popup from \"../components/Popup\";\nimport ColorPicker from \"../components/ColorPicker\";\nimport { ItemWrapper, Icon } from \"./atom\";\nimport useColor from \"./useColorHook\";\n\ninterface IProps {\n  selected: boolean;\n  onChange: (params: Pick<IBoardSetting, \"color\" | \"width\">) => void;\n  onClick: () => void;\n}\n\nconst Wrapper = styled.div`\n  background: white;\n  padding: 16px 0;\n  border-radius: 4px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n`;\n\nconst HighLighter = ({ selected, onChange, onClick }: IProps) => {\n  const [color, setColor] = React.useState(\"#FFFF00\");\n  const picker = useColor();\n  const firstRun = React.useRef(true);\n\n  React.useEffect(() => {\n    if (firstRun.current) {\n      firstRun.current = false;\n      return;\n    }\n    onChange({ width: 5, color: color });\n  }, [color, picker.colors]);\n\n  return (\n    <Popup\n      allowed={selected}\n      offset={{ x: -8 }}\n      trigger={\n        <ItemWrapper\n          onClick={() => {\n            onClick();\n            onChange({ width: 5, color: color });\n          }}\n          selected={selected}\n        >\n          <Icon src={highlighter} />\n        </ItemWrapper>\n      }\n    >\n      <Wrapper style={{ width: \"120px\" }}>\n        <ItemWrapper>\n          <ColorPicker\n            {...picker}\n            value={color}\n            onChange={(color) => setColor(color)}\n          />\n        </ItemWrapper>\n      </Wrapper>\n    </Popup>\n  );\n};\n\nexport default React.memo(HighLighter);\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport { IBoardSetting } from \"../interfaces\";\nimport eraser from \"../assets/eraser.svg\";\nimport Popup from \"../components/Popup\";\nimport Slider from \"../components/Slider\";\nimport { ItemWrapper, Icon, Badge, Label } from \"./atom\";\n\ninterface IProps {\n  selected: boolean;\n  onChange: (params: Pick<IBoardSetting, \"width\">) => void;\n  onClick: () => void;\n}\n\nconst Wrapper = styled.div`\n  background: white;\n  padding: 16px 0;\n  border-radius: 4px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n`;\n\nconst Eraser = ({ selected, onChange, onClick }: IProps) => {\n  const [width, setWidth] = React.useState(1);\n  const firstRun = React.useRef(true);\n\n  React.useEffect(() => {\n    if (firstRun.current) {\n      firstRun.current = false;\n      return;\n    }\n    onChange({ width: width * 3 });\n  }, [width]);\n\n  return (\n    <Popup\n      allowed={selected}\n      offset={{ x: -8 }}\n      trigger={\n        <ItemWrapper\n          onClick={() => {\n            onClick();\n            onChange({ width: width * 3 });\n          }}\n          selected={selected}\n        >\n          <Icon src={eraser} />\n        </ItemWrapper>\n      }\n    >\n      <Wrapper>\n        <ItemWrapper flex>\n          <Label>Size:</Label>\n          <Slider\n            value={width}\n            min={1}\n            max={5}\n            onChange={(width) => setWidth(width)}\n          />\n          <Badge>{width * 3}</Badge>\n        </ItemWrapper>\n      </Wrapper>\n    </Popup>\n  );\n};\n\nexport default React.memo(Eraser);\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport font from \"../assets/font.svg\";\nimport Popup from \"../components/Popup\";\nimport ColorPicker from \"../components/ColorPicker\";\nimport { ItemWrapper, Icon, Badge } from \"./atom\";\nimport { IBoardSetting } from \"../interfaces\";\nimport useColor from \"./useColorHook\";\n\ninterface IProps {\n  selected: boolean;\n  onChange: (params: Pick<IBoardSetting, \"color\" | \"fontSize\">) => void;\n  onClick: () => void;\n}\n\nconst Wrapper = styled.div`\n  background: white;\n  padding: 16px 0;\n  border-radius: 4px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n`;\n\nconst FontSizeWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst FontSize = styled.div<{ selected: boolean }>`\n  &:not(:last-child) {\n    margin-right: 4px;\n  }\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  border: 1px solid;\n  padding: 0 2px 2px;\n  border-color: ${({ selected }) => (selected ? \"#ddd\" : \"white\")};\n`;\n\nconst Font = styled.p<{ size: number }>`\n  font-size: ${({ size }) => size}px;\n  height: 20px;\n  line-height: 20px;\n  margin: 8px;\n`;\n\nconst Text = ({ selected, onChange, onClick }: IProps) => {\n  const [fontSize, setFontSize] = React.useState(14);\n  const firstRun = React.useRef(true);\n  const picker = useColor();\n  const [color, setColor] = React.useState(\"#000000\");\n\n  const handleFontSizeClick = (event: React.MouseEvent) => {\n    setFontSize(\n      parseInt((event.target as HTMLDivElement).getAttribute(\"data-size\")!)\n    );\n  };\n\n  React.useEffect(() => {\n    if (firstRun.current) {\n      firstRun.current = false;\n      return;\n    }\n    onChange({ fontSize, color });\n  }, [fontSize, color]);\n\n  return (\n    <Popup\n      allowed={selected}\n      offset={{ x: -8, y: -80 }}\n      trigger={\n        <ItemWrapper\n          onClick={() => {\n            onClick();\n            onChange({ fontSize, color });\n          }}\n          selected={selected}\n        >\n          <Icon src={font} />\n        </ItemWrapper>\n      }\n    >\n      <Wrapper style={{ width: \"120px\" }}>\n        <ItemWrapper>\n          <ColorPicker\n            {...picker}\n            value={color}\n            onChange={(color) => setColor(color)}\n          />\n        </ItemWrapper>\n        <ItemWrapper>\n          <FontSizeWrapper>\n            {[12, 14, 18].map((size) => (\n              <FontSize\n                key={size}\n                onClick={handleFontSizeClick}\n                data-size={size}\n                selected={fontSize === size}\n              >\n                <Font data-size={size} size={size}>\n                  T\n                </Font>\n                <Badge data-size={size}>{size}</Badge>\n              </FontSize>\n            ))}\n          </FontSizeWrapper>\n        </ItemWrapper>\n      </Wrapper>\n    </Popup>\n  );\n};\n\nexport default Text;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport { IBoardSetting, BoardToolType } from \"../interfaces\";\nimport { boardSettings } from \"../default\";\nimport Brush from \"./Brush\";\nimport Highlighter from \"./Highlighter\";\nimport Eraser from \"./Eraser\";\nimport Text from \"./Text\";\n\ninterface IProps {\n  settings: IBoardSetting;\n  setSettings: (setting: IBoardSetting) => void;\n}\n\nconst Wrapper = styled.div`\n  position: fixed;\n  right: 16px;\n  top: 16px;\n  top: 50%;\n  transform: translate(0, -50%);\n  padding: 16px 0;\n  display: flex;\n  flex-direction: column;\n  background: white;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n  /* border-top-left-radius: 4px;\n  border-bottom-left-radius: 4px; */\n  border-radius: 4px;\n`;\n\nconst Setting = ({ setSettings }: IProps) => {\n  const [selected, setSelected] = React.useState<BoardToolType>(\"BRUSH\");\n\n  const updateSetting = (settings: Partial<IBoardSetting>) => {\n    setSettings({\n      ...boardSettings,\n      ...settings,\n    });\n  };\n\n  return (\n    <Wrapper>\n      <Brush\n        onClick={() => {\n          setSelected(\"BRUSH\");\n        }}\n        onChange={updateSetting}\n        selected={\"BRUSH\" === selected}\n      />\n      <Text\n        onClick={() => {\n          setSelected(\"TEXT\");\n        }}\n        onChange={(params) => updateSetting({ ...params, text: true })}\n        selected={\"TEXT\" === selected}\n      />\n      <Highlighter\n        onClick={() => {\n          setSelected(\"HIGHLIGHTER\");\n        }}\n        onChange={(params) => updateSetting({ ...params, highlight: true })}\n        selected={\"HIGHLIGHTER\" === selected}\n      />\n      <Eraser\n        onClick={() => {\n          setSelected(\"ERASER\");\n        }}\n        onChange={(params) => updateSetting({ ...params, eraser: true })}\n        selected={\"ERASER\" === selected}\n      />\n    </Wrapper>\n  );\n};\n\nexport default Setting;\n","import styled from \"styled-components\";\n\nconst TextArea = styled.textarea`\n  border: none;\n  background: none;\n  position: fixed;\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport default TextArea;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport { IBoardSetting } from \"../interfaces\";\nimport { boardSettings } from \"../default\";\nimport TextArea from \"../components/TextArea\";\n\ntype Plots = Array<{ x: number; y: number }>;\n\ntype IProps = Partial<IBoardSetting>;\n\nconst Canvas = styled.canvas`\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\n\nconst Wrapper = styled.div<{ text: boolean }>`\n  ${Canvas} {\n    cursor: ${({ text }) => (text ? \"text\" : \"crosshair\")};\n  }\n  position: relative;\n  height: 100%;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  position: fixed;\n  right: 16px;\n  bottom: 16px;\n  background: white;\n  border: 2px solid #efefef;\n  padding: 4px 8px;\n  border-radius: 4px;\n  cursor: pointer;\n  &:hover {\n    background: #efefef;\n  }\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst WhiteBoard = (dirtyProps: IProps) => {\n  const props = { ...boardSettings, ...dirtyProps };\n\n  const [drawing, setDrawing] = React.useState(false);\n  const [\n    textareaStyle,\n    setTextAreaStyle,\n  ] = React.useState<React.CSSProperties | null>(null);\n  const points = React.useRef<Plots>([]);\n  const imageData = React.useRef<any>(null);\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const highlightRef = React.useRef<HTMLCanvasElement>(null);\n  const textAreaRef = React.useRef<HTMLTextAreaElement>(null);\n  const [dimension, setDimension] = React.useState<{\n    height: number;\n    width: number;\n  } | null>(null);\n\n  React.useEffect(() => {\n    if (textAreaRef.current) {\n      textAreaRef.current.focus();\n    }\n  }, [textareaStyle]);\n\n  React.useEffect(() => {\n    window.onresize = () => {\n      const ctx = canvasRef.current!.getContext(\"2d\")!;\n      imageData.current = ctx.getImageData(\n        0,\n        0,\n        canvasRef.current!.offsetWidth,\n        canvasRef.current!.offsetHeight\n      );\n      setDimension({\n        height: document.body.offsetHeight,\n        width: document.body.offsetWidth,\n      });\n    };\n  }, []);\n\n  React.useLayoutEffect(() => {\n    if (imageData.current) {\n      const ctx = canvasRef.current!.getContext(\"2d\")!;\n      ctx.putImageData(imageData.current, 0, 0);\n    }\n    imageData.current = null;\n  }, [dimension]);\n\n  const resetPoints = () => {\n    if (points.current.length > 1) {\n      points.current = [points.current[1]];\n    }\n  };\n\n  const clearBoard = () => {\n    if (highlightRef.current) {\n      highlightRef\n        .current!.getContext(\"2d\")!\n        .clearRect(\n          0,\n          0,\n          highlightRef.current!.offsetWidth,\n          highlightRef.current!.offsetHeight\n        );\n    }\n    canvasRef\n      .current!.getContext(\"2d\")!\n      .clearRect(\n        0,\n        0,\n        canvasRef.current!.offsetWidth,\n        canvasRef.current!.offsetHeight\n      );\n  };\n\n  const handleTextAreaBlur = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const value = event.target.value;\n    const ctx = canvasRef.current!.getContext(\"2d\")!;\n    ctx.font = `${props.fontSize}px Arial`;\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.fillStyle = props.color;\n    ctx.fillText(\n      value,\n      parseInt(textareaStyle!.left as string, 10),\n      parseInt(textareaStyle!.top as string, 10) + props.fontSize\n    );\n    setTextAreaStyle(null);\n  };\n\n  const drawOnCanvas = (plots: Plots) => {\n    const ctx =\n      props.highlight && !props.eraser\n        ? highlightRef.current!.getContext(\"2d\")!\n        : canvasRef.current!.getContext(\"2d\")!;\n\n    ctx.lineWidth = props.width;\n    ctx.lineCap = props.smooth!;\n    ctx.strokeStyle = props.color;\n\n    if (props.eraser) {\n      ctx.globalCompositeOperation = \"destination-out\";\n    } else {\n      ctx.globalCompositeOperation = \"source-over\";\n    }\n\n    ctx.beginPath();\n    ctx.moveTo(plots[0].x, plots[0].y);\n\n    for (let i = 0; i < plots.length; i++) {\n      ctx.lineTo(plots[i].x, plots[i].y);\n    }\n    resetPoints();\n\n    ctx.stroke();\n  };\n\n  const handleMouseMove = (reactEvent: React.MouseEvent) => {\n    const event = reactEvent.nativeEvent;\n    if (drawing) {\n      const x = event.offsetX;\n      const y = event.offsetY;\n      points.current.push({ x, y });\n      drawOnCanvas(points.current);\n    }\n  };\n\n  const handleMouseDown = (reactEvent: React.MouseEvent) => {\n    const plots = points.current;\n    const event = reactEvent.nativeEvent;\n    const x = event.offsetX;\n    const y = event.offsetY;\n\n    if (props.text) {\n      if (textareaStyle) {\n        return;\n      }\n      setTextAreaStyle({ top: y, left: x, fontSize: props.fontSize });\n      return;\n    }\n\n    if (plots[0]) {\n      const distance = Math.sqrt((x - plots[0].x) ^ (2 + (y - plots[0].y)) ^ 2);\n      if (distance < props.width) return;\n    }\n    points.current.push({ x, y });\n    drawOnCanvas(plots);\n    setDrawing(true);\n  };\n\n  const handleMouseUp = () => {\n    if (props.text) {\n      return;\n    }\n    console.log(\"handleMouseUp\");\n    points.current = [];\n    setDrawing(false);\n  };\n\n  React.useLayoutEffect(() => {\n    setDimension({\n      height: document.body.offsetHeight,\n      width: document.body.offsetWidth,\n    });\n  }, []);\n\n  return (\n    <Wrapper text={props.text}>\n      <Canvas\n        ref={canvasRef}\n        width={dimension ? dimension.width : \"100%\"}\n        height={dimension ? dimension.height : \"100%\"}\n        onMouseMove={handleMouseMove}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseUp}\n      />\n      {props.highlight && (\n        <Canvas\n          style={{ opacity: 0.5 }}\n          ref={highlightRef}\n          width={dimension ? dimension.width : \"100%\"}\n          height={dimension ? dimension.height : \"100%\"}\n          onMouseMove={handleMouseMove}\n          onMouseDown={handleMouseDown}\n          onMouseUp={handleMouseUp}\n          onMouseLeave={handleMouseUp}\n        />\n      )}\n      {textareaStyle && (\n        <TextArea\n          ref={textAreaRef}\n          rows={2000}\n          cols={2000}\n          onBlur={handleTextAreaBlur}\n          style={textareaStyle}\n        />\n      )}\n      <Button onClick={clearBoard}>Clear Board</Button>\n    </Wrapper>\n  );\n};\n\nexport default WhiteBoard;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nimport Setting from \"./Setting\";\nimport WhiteBoard from \"./WhiteBoard\";\nimport { IBoardSetting } from \"./interfaces\";\nimport { boardSettings } from \"./default\";\n\nconst Wrapper = styled.div`\n  height: 100%;\n  width: 100%;\n`;\n\nconst App = () => {\n  const [settings, setSettings] = React.useState<IBoardSetting>(boardSettings);\n\n  return (\n    <Wrapper className=\"App\">\n      <WhiteBoard {...settings} />\n      <Setting settings={settings} setSettings={setSettings} />\n    </Wrapper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}